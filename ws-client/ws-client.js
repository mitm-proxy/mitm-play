(()=>{var __defProp=Object.defineProperty;var __hasOwnProp=Object.prototype.hasOwnProperty;var __getOwnPropSymbols=Object.getOwnPropertySymbols;var __propIsEnum=Object.prototype.propertyIsEnumerable;var __defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:true,configurable:true,writable:true,value}):obj[key]=value;var __objSpread=(a,b)=>{for(var prop in b||(b={}))if(__hasOwnProp.call(b,prop))__defNormalProp(a,prop,b[prop]);if(__getOwnPropSymbols)for(var prop of __getOwnPropSymbols(b)){if(__propIsEnum.call(b,prop))__defNormalProp(a,prop,b[prop])}return a};var __commonJS=(cb,mod)=>function __require(){return mod||(0,cb[Object.keys(cb)[0]])((mod={exports:{}}).exports,mod),mod.exports};var require_ws_postmessage=__commonJS({"ws-client/_src/_ws_postmessage.js"(exports,module){module.exports=()=>{function receiveMessage(event2){if(window.mitm.client.postmessage){console.log(`>>> Postmessage: ${event2.origin} => https://${location.host}`,event2.data)}}window.addEventListener("message",receiveMessage,false)}}});var require_ws_client=__commonJS({"ws-client/_src/_ws_client.js"(exports,module){module.exports=()=>{let windowRef;return{_help({data}){console.log(data)},_ping({data}){console.log(data)},_open({data}){const features="directories=0,titlebar=0,toolbar=0,location=0,status=0,menubar=0,width=800,height=600";windowRef=window.open(data.url,"_logs",features);windowRef.blur()},_style({data}){const{q,css}=data;document.querySelectorAll(q).forEach(node=>node.style.cssText=css)},_saveTags({routes}){if(!location.origin.match("chrome-extension")){window.mitm.routes=routes}},_files({data,typ}){const{files}=window.mitm;console.warn(`receive brodcast ${typ}`);for(const key in files[`${typ}_events`]){console.warn(files[`${typ}_events`][key]+"");files[`${typ}_events`][key](data)}},_setClient({data}){console.log("_setClient",data);window.mitm.client=data}}}}});var require_ws_msg_parser=__commonJS({"ws-client/_src/_ws_msg-parser.js"(exports,module){var _ws_client=require_ws_client();var _ws_wccmd=_ws_client();module.exports=(event2,msg)=>{if(window.mitm.argv.debug){if(msg.length>40){console.log(">>> ws-message: `%s...`",msg.slice(0,40))}else{console.log(">>> ws-message: `%s`",msg)}}const arr=msg.replace(/\s+$/,"").match(/^ *([\w:]+) *(\{.*)/);if(arr){let[,cmd,json]=arr;try{if(typeof json==="string"){json=JSON.parse(json)}}catch(error){console.error(json,error)}if(window._ws_queue[cmd]){const handler=window._ws_queue[cmd];delete window._ws_queue[cmd];handler(json.data)}else if(_ws_wccmd[cmd]){_ws_wccmd[cmd].call(event2,json)}}}}});var require_ws_in_iframe=__commonJS({"ws-client/_src/_ws_in-iframe.js"(exports,module){module.exports=()=>{let ifrm;try{ifrm=window.self!==window.top}catch(e){ifrm=true}return ifrm?"iframe":"window"}}});var require_ws_init_socket=__commonJS({"ws-client/_src/_ws_init-socket.js"(exports,module){var _ws_msgParser=require_ws_msg_parser();var _ws_inIframe=require_ws_in_iframe();module.exports=()=>{window._ws_queue={};window._ws_connected=false;const{__flag}=window.mitm;if(window._ws_connect===void 0){window._ws_connect={}}const onopen=data=>{function ws_send(){for(const key in window._ws_connect){window._ws_connected_send=true;console.warn(window._ws_connect[key]+"");window._ws_connect[key](data)}}if(__flag["ws-connect"]){console.log("ws: open connection")}console.timeEnd("ws");window._ws_connected=true;setTimeout(ws_send,1);setTimeout(()=>{if(!window._ws_connected_send){console.error("RETRY..........");ws_send()}},10)};const onclose=function(){if(__flag["ws-connect"]){console.log("ws: close connection")}};const onmessage=function(e){_ws_msgParser(event,event.data)};const url=`wss://localhost:3001/ws?page=${_ws_inIframe()}&url=${document.URL.split("?")[0]}`;const ws=new WebSocket(url);console.time("ws");window._ws=ws;ws.onopen=onopen;ws.onclose=onclose;ws.onmessage=onmessage;if(__flag["ws-connect"]){console.log("ws: init connection")}}}});var require_ws_namespace=__commonJS({"ws-client/_src/_ws_namespace.js"(exports,module){module.exports=()=>{const{hostname:host}=location;let namespace;function toRegex(str){return str.replace(/\./g,"\\.").replace(/\?/g,"\\?")}for(const key in window.mitm.routes){if(host.match(toRegex(key.replace(/~/,"[^.]*")))){namespace=key;break}}return namespace}}});var require_ws_vendor=__commonJS({"ws-client/_src/_ws_vendor.js"(exports,module){module.exports=()=>{const{vendor}=navigator;const browser={"":"firefox","Google Inc.":"chromium","Apple Computer, Inc.":"webkit"}[vendor];return browser}}});var require_ws_screenshot=__commonJS({"ws-client/_src/_ws_screenshot.js"(exports,module){var _ws_namespace=require_ws_namespace();var _ws_vendor=require_ws_vendor();var act;function screenshot(e){if(mitm.argv.lazyclick){if(mitm.screenshot){window.mitm.screenshot=void 0;console.log(">>> delay action");return}if(act){act=void 0;return}}const namespace=_ws_namespace();const browser=_ws_vendor();const host=location.origin.replace("://","~~");const route=window.mitm.routes[namespace];const{selector}=route.screenshot;const arr=document.body.querySelectorAll(selector);const fname=location.pathname.replace(/^\//g,"~");const delay=mitm.argv.lazyclick===true?700:mitm.argv.lazyclick;for(const el of arr){let node=e.target;while(el!==node&&node!==document.body){node=node.parentNode}if(node!==document.body){const _page=window["xplay-page"];const params={namespace,_page,host,browser};params.fname=fname==="~"?"~_":fname;window.ws__send("screenshot",params);if(mitm.argv.lazyclick){window.mitm.screenshot=e.target;e.stopImmediatePropagation();e.stopPropagation();e.preventDefault();setTimeout(()=>{act=window.mitm.screenshot;if(act){act.click();act=void 0}else{console.log("delay action undefined")}},delay)}return}}}module.exports=()=>{const route=window.mitm.routes[_ws_namespace()];if(route&&route.screenshot){window.addEventListener("DOMContentLoaded",()=>{document.querySelector("body").addEventListener("click",screenshot)})}}}});var require_ws_location=__commonJS({"ws-client/_src/_ws_location.js"(exports,module){var _ws_namespace=require_ws_namespace();var _ws_vendor=require_ws_vendor();module.exports=()=>{const containerStyle1="position: fixed;z-index: 9999;right: 3px;";const containerStyle2="position: fixed;z-index: 9999;left:  3px;";const containerStyle3="position: fixed;z-index: 9999;right: 3px; top: 20px; text-align: end;";const buttonStyle="border: none;border-radius: 15px;font-size: 10px;cursor: pointer;";const auto='<button class="btn-autofill">Autofill</button>';const event2=new Event("urlchanged");let container={right3:{},right:{},left:{}};let ctrl=false;let button={};let bgroup={right3:{},right:{},left:{}};let intervId;let observerfn;function toRegex(pathMsg){let[path,msg]=pathMsg.split("=>").map(item=>item.trim());path=path.replace(/\./g,"\\.").replace(/\?/g,"\\?");return{path,msg}}function createButton(buttons,pos){let br;for(const id in buttons){const[caption,color,klas]=id.split("|");const btn=document.createElement("button");const ev=buttons[id];btn.onclick=e=>{const arr=ev(e);Array.isArray(arr)&&play(arr)};btn.innerText=caption;btn.classList.add("mitm-btn");btn.classList.add(`${pos}`);btn.classList.add(klas||caption);btn.style=buttonStyle+(color?`background: ${color};`:"");bgroup[pos].appendChild(btn);if(pos==="right"){br=document.createElement("span");br.innerHTML="&nbsp;"}else{br=document.createElement("pre");br.style="margin: 0px;"}bgroup[pos].appendChild(br)}}function setButtons(buttons,position){if(bgroup[position]){bgroup[position].innerHTML="";createButton(buttons,position)}}let debunk;function urlChange(event3){const namespace=_ws_namespace();if(window.mitm.autofill){delete window.mitm.autofill}if(window.mitm.autointerval){clearInterval(intervId);delete window.mitm.autointerval}if(window.mitm.autobuttons){delete window.mitm.autobuttons}if(window.mitm.rightbuttons){delete window.mitm.rightbuttons}if(window.mitm.leftbuttons){delete window.mitm.leftbuttons}if(window.mitm.macrokeys){delete window.mitm.macrokeys}if(namespace){const{href,origin}=location2;const _href=href.replace(origin,"");const{_macros_,macros}=window.mitm;observerfn=void 0;for(const key in macros){const{path,msg}=toRegex(key);if(_href.match(path)){button.innerHTML=msg||"Autofill";_macros_&&_macros_();observerfn=macros[key]();debunk&&clearTimeout(debunk);debunk=setTimeout(()=>{debunk=void 0;const{autobuttons,rightbuttons,leftbuttons}=window.mitm;rightbuttons&&setButtons(rightbuttons,"right3");leftbuttons&&setButtons(leftbuttons,"left");const{autofill}=window.mitm;if(autofill){autobuttons&&setButtons(__objSpread(__objSpread({},autobuttons),{"Autofill"(){play(autofill)}}),"right")}else{autobuttons&&setButtons(autobuttons,"right")}},0)}}}container.right3.style=containerStyle3;container.right.style=containerStyle1;container.left.style=containerStyle2;const visible=window.mitm.autofill;button.style=buttonStyle+(visible?"background-color: azure;":"display: none;");if(typeof window.mitm.autointerval==="function"){intervId=setInterval(window.mitm.autointerval,500)}ctrl=false}function play(autofill,handler){if(autofill){if(typeof autofill==="function"){autofill=autofill()}const browser=_ws_vendor();const lenth=autofill.length;const _page=window["xplay-page"];const _frame=window["xplay-frame"];console.log(lenth===1?`  ${autofill}`:JSON.stringify(autofill,null,2));window.ws__send("autofill",{autofill,browser,_page,_frame},handler)}}window.mitm.fn.play=arr=>{return new Promise(function(resolve,reject){try{play(arr,resolve)}catch(error){reject(error)}})};function keybCtrl(e){const{macrokeys}=window.mitm;if(e.ctrlKey&&e.key==="Shift"){ctrl=!ctrl;container.right3.style=containerStyle3+(!ctrl?"":"display: none;");container.right.style=containerStyle1+(!ctrl?"":"display: none;");container.left.style=containerStyle2+(!ctrl?"":"display: none;")}else if(e.ctrlKey&&e.altKey){console.log({macro:`ctrl + alt + ${e.code}`});if(macrokeys){let macro=macrokeys[e.code];if(macro){macro=macro();if(Array.isArray(macro)){let macroIndex=0;const interval=setInterval(()=>{let selector=macro[macroIndex];if(selector.match(/^ *[=-]>/)){const activeElement=CssSelectorGenerator.getCssSelector(document.activeElement);selector=`${activeElement} ${selector}`}play([selector]);macroIndex+=1;if(macroIndex>=macro.length){clearInterval(interval)}},100)}}}}}if(!window.chrome){return}if(!chrome.tabs){document.querySelector("html").addEventListener("keydown",keybCtrl);window.addEventListener("urlchanged",urlChange);window.addEventListener("DOMContentLoaded",()=>{const html=document.querySelector("html");const htmlref=html.firstElementChild;const styleBtnLeft=document.createElement("style");const divTopRight3=document.createElement("div");const divTopRight=document.createElement("div");const divTopLeft=document.createElement("div");styleBtnLeft.innerHTML="button.mitm-btn:hover{text-decoration:underline;}";divTopRight3.innerHTML=`<span class="bgroup-right"></span>`;divTopRight.innerHTML=`<span class="bgroup-right"></span>`;divTopLeft.innerHTML=`<span class="bgroup-left"></span>`;divTopRight.className="mitm autofill-container";divTopLeft.className="mitm autofill-container";divTopRight3.style=containerStyle3;divTopRight.style=containerStyle1;divTopLeft.style=containerStyle2;html.insertBefore(styleBtnLeft,htmlref);html.insertBefore(divTopRight3,htmlref);html.insertBefore(divTopRight,htmlref);html.insertBefore(divTopLeft,htmlref);setTimeout(()=>{container.right3=divTopRight3;container.right=divTopRight;container.left=divTopLeft;button.style=`${buttonStyle}background-color: azure;`;bgroup.right3=divTopRight3.children[0];bgroup.right=divTopRight.children[0];bgroup.left=divTopLeft.children[0];urlChange(event2);observed()},0)})}const{location:location2}=document;let oldHref=location2.href;let oDebunk=void 0;function compareHref(nodes){if(oldHref!=location2.href){window.dispatchEvent(event2);oldHref=location2.href}else{if(typeof observerfn==="function"){oDebunk&&clearTimeout(oDebunk);oDebunk=setTimeout(()=>{oDebunk=void 0;observerfn(nodes);const{autobuttons,rightbuttons,leftbuttons}=window.mitm;rightbuttons&&setButtons(rightbuttons,"right3");leftbuttons&&setButtons(leftbuttons,"left");const{autofill}=window.mitm;if(autofill){autobuttons&&setButtons(__objSpread(__objSpread({},autobuttons),{"Autofill"(){play(autofill)}}),"right")}else{autobuttons&&setButtons(autobuttons,"right")}},100)}}}const fn=history.pushState;history.pushState=function(){fn.apply(history,arguments);compareHref()};const observer=new MutationObserver(compareHref);function observed(){observer.disconnect();const body=document.querySelector("body");observer.observe(body,{childList:true,subtree:true})}}}});var require_ws_debounce=__commonJS({"ws-client/_src/_ws_debounce.js"(exports,module){function debounce(fn,delay=500){let _timeout;return function(){const _this=this;const args=arguments;_timeout&&clearTimeout(_timeout);_timeout=setTimeout(()=>{fn.apply(_this,args)},delay)}}module.exports=debounce}});var require_ws_route=__commonJS({"ws-client/_src/_ws_route.js"(exports,module){var _ws_namespace=require_ws_namespace();module.exports=()=>{const namespace=_ws_namespace();let route=window.mitm.routes[namespace];const{_subns:s}=route._childns;if(s&&mitm.routes[s]){route=mitm.routes[s]}return route}}});var require_ws_observer=__commonJS({"ws-client/_src/_ws_observer.js"(exports,module){var _ws_namespace=require_ws_namespace();var _ws_debounce=require_ws_debounce();var _ws_vendor=require_ws_vendor();var _ws_route=require_ws_route();module.exports=()=>{if(location.origin.match("chrome-extension")){return}const{hostname:host}=location;const sshot={};const nodes={};let route=_ws_route();if(route&&route.screenshot){const{observer:ob2}=route.screenshot;for(const id in ob2){let el={};if(ob2[id]===true){el={title:"notitle",insert:true,remove:true}}if(typeof ob2[id]!=="string"){el={title:"nocapture",insert:false,remove:false}}else{const arr=ob2[id].split(":");arr[1].split(",").map(e=>{el[e]=true});el.title=arr[0]}sshot[id]=el;nodes[id]={insert:false,remove:true}}}let ob;let fname;const namespace=_ws_namespace();const browser=_ws_vendor();const callback=function(){if(route&&route.screenshot){ob=route.screenshot.observer}const _page=window["xplay-page"];for(const id in nodes){const el=document.body.querySelectorAll(id);if(el.length){if(!nodes[id].insert){nodes[id].insert=true;if(nodes[id].remove!==void 0){nodes[id].remove=false}if(ob&&typeof ob[id]==="function"){const nod=el[0]||el;if(nod._ws_count===void 0){nod._ws_count=0}nod._ws_count+=1;if(nod._ws_count<2){ob[id](nod)}}if(sshot[id].insert){fname=location.pathname.replace(/^\//,"").replace(/\//g,"-");fname=`${fname}-${sshot[id].title}-insert`;window.ws__send("screenshot",{namespace,_page,host,fname,browser})}}}else{if(!nodes[id].remove){nodes[id].remove=true;nodes[id].insert=false;if(sshot[id].remove){fname=location.pathname.replace(/^\//,"").replace(/\//g,"-");fname=`${fname}-${sshot[id].title}-remove`;window.ws__send("screenshot",{namespace,_page,host,fname,browser})}}}}};document.addEventListener("DOMContentLoaded",()=>{const observer=new MutationObserver(_ws_debounce(callback,100));observer.observe(document.body,{attributes:true,childList:true,subtree:true})})}}});var require_ws_general=__commonJS({"ws-client/_src/_ws_general.js"(exports,module){var t64="Wabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZh";var nanoid=(size=8)=>{let id="";while(size-- >0){id+=t64[Math.random()*64|0]}return id};module.exports=()=>{const{_ws}=window;window.ws_broadcast=(json,_all=true)=>{const msg={data:json,_all};_ws.send(`broadcast${JSON.stringify(msg)}`)};window.ws_emitpage=(json,regex="")=>{const msg={data:json,regex};_ws.send(`emitpage${JSON.stringify(msg)}`)};window.ws__style=(json,_all=true)=>{const msg={data:json,_all};_ws.send(`_style${JSON.stringify(msg)}`)};window.ws__ping=json=>{const msg={data:json};_ws.send(`_ping${JSON.stringify(msg)}`)};window.ws__help=()=>{_ws.send("_help{}")};window.ws__open=json=>{const msg={data:json};_ws.send(`_open${JSON.stringify(msg)}`)};window.ws__send=(cmd,data,handler)=>{const{__flag}=window.mitm;const id=nanoid();const key=`${cmd}:${id}`;window._ws_queue[key]=handler||(w=>{});setTimeout(function(){if(window._ws_queue[key]){delete window._ws_queue[key];console.log(">>> ws timeout!",key)}},5e3);const params=`${key}${JSON.stringify({data})}`;if(__flag["ws-message"]){console.log("_ws.send",cmd)}_ws.send(params)}}}});var require_ws_csp_err=__commonJS({"ws-client/_src/_ws_csp-err.js"(exports,module){var _ws_namespace=require_ws_namespace();var _timeout;var _csp={};module.exports=()=>{const cspError=function(e){const{hostname:host}=location;const namespace=_ws_namespace();const path=location.pathname.replace(/^\//,"").replace(/\//g,"-");const{blockedURI,disposition,documentURI,effectiveDirective,originalPolicy,timeStamp,type,violatedDirective}=e;const typ=`[${disposition}] ${documentURI}`;if(!_csp[typ]){_csp[typ]={}}if(!_csp[typ]._general_){_csp[typ]._general_={policy:originalPolicy,namespace,host,path}}const _doc=_csp[typ];if(!_doc[violatedDirective]){_doc[violatedDirective]={}}const _err=_doc[violatedDirective];if(!_err[blockedURI]){_err[blockedURI]={}}const _match=originalPolicy.match(`${violatedDirective} [^;]+;`);const directive=_match?_match[0]:effectiveDirective;_err[blockedURI]={directive,timeStamp,type};_timeout&&clearTimeout(_timeout);_timeout=setTimeout(()=>{console.log(">>> CSP:",_csp);_csp={}},4e3)};if(window.mitm.client.csp){document.addEventListener("securitypolicyviolation",cspError)}}}});var _ws_postmessage=require_ws_postmessage();var _ws_initSocket=require_ws_init_socket();var _ws_screenshot=require_ws_screenshot();var _ws_location=require_ws_location();var _ws_observer=require_ws_observer();var _ws_general=require_ws_general();var _ws_cspErr=require_ws_csp_err();_ws_postmessage();_ws_initSocket();_ws_screenshot();_ws_location();_ws_observer();_ws_general();_ws_cspErr();console.log("ws-client loaded...");})();
//# sourceMappingURL=data:application/json;base64,
